{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sprocket Pan","text":"<p>A tool for sending HTTP(S) requests over the internet - essentialy a UI on top of curl plus some quality-of-life features. Similar to Postman and Insomnia.</p>"},{"location":"#inspiration","title":"Inspiration","text":"<p>Postman has been the go-to tool for developers to test their RESTful (and other types of) APIs for the good part of the last decade. However, recent changes to Postman have made it such that you need to create an account to gain full functionality of the tool, and Postman actually deleted the user data of everyone who didn't migrate. Insomnia, which bills itself as a FOSS alternative, also recently pushed an update mirroring Postman's changes.</p> <p>The enshittifaction of the internet has to stop. Greed drives everyday descision-making, and public tools have been constantly limit-tested against the willingness of end-users to put up with each additional pay-wall or data-wall. Sprocket Pan was just built for me, in order to have a tool that I know is free, secure, cloudless, and rich in features. However, in the spirit of open source, and in honor of all of the incredible free tools that I use every day, I wanted to make Sprocket Pan available for everyone. We will never charge money for anything, we will never collect or harvest any data (and/or train your data on an AI), and Sprocket Pan will always be FOSS.</p>"},{"location":"#compare-with-other-tools","title":"Compare with Other Tools","text":"Tool Name Scripts Response History No Account Required 100% FOSS with no hidden code Response Diff Tool Sprocket Pan Postman Insomnia <p> Get started!</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#authors","title":"Authors","text":""},{"location":"about/#itai-fish","title":"Itai Fish","text":""},{"location":"about/#katelynn-pullen","title":"KateLynn Pullen","text":""},{"location":"about/#tech-stack","title":"Tech Stack","text":""},{"location":"about/#sprocket-pan","title":"Sprocket Pan","text":"<p>Application Framework: Tauri, Rust</p> <p>Frontend: Typescript, Vite, React, Redux</p> <p>CI/CD: Github Actions</p> <p></p>"},{"location":"about/#sprocket-docs","title":"Sprocket Docs","text":"<p>Docs Page: mkdocs, mkdocs-material, python</p> <p>CI/CD: Github Actions</p> <p>Hosting: Github Pages</p> <p></p>"},{"location":"about/#why-sprocket-pan","title":"Why \"Sprocket Pan\"?","text":"<p>When Insomnia announced their user account requirements, many people at the company I worked at were panicked, searching for a good alternative to Insomnia. A group of engineers decided to get together to build the tool themself, as they could then integrate with company-specific features while having something reliable and useful. They pitched the name \"Rocket Man\" a play on the original Postman that they would be emulating. When discussing the application framework to use, I suggested Tauri, a multi-platform framework built in rust, with blazing fast built speeds, tiny memory and storage footprints, and an active development community behind it. Others at the company fought back against Tauri, fearing that the Rust language would be too hard for developers to work in. Given that an absolutely miniscule amount of Sprocket Pan is actually Rust, their fears were unfounded for multiple reasons, but it was enough for them to work on Rocket Man in Electron. I decided to build my own application, with blackjack and hookers Rust and Typescript. I named it Sprocket Pan, a spoof on the already-a-spoof-of-something-else Rocket Man.</p> <p> Contributing</p>"},{"location":"contributing/","title":"Contributing to Sprocket Pan","text":""},{"location":"contributing/#running-locally","title":"Running Locally","text":"<p>Fork Sprocket Pan Here </p>"},{"location":"contributing/#recommended-ide-setup","title":"Recommended IDE Setup","text":"<ul> <li>VS Code + Recommended Extentions</li> </ul>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ol> <li>nodejs Version 18+</li> <li>yarn - You can install from <code>npm</code>, which comes with <code>node</code></li> <li>Tauri's Pre-Reqs</li> </ol>"},{"location":"contributing/#how-to-run","title":"How to Run","text":"<ol> <li><code>yarn</code> (install dependancies)</li> <li><code>yarn run start</code> (run locally)</li> </ol> <p> Terminology  About</p>"},{"location":"documentation/panels/","title":"Panels","text":""},{"location":"documentation/panels/#settings","title":"Settings","text":"<p>The Settings Panel allows the user to change different settings within Sprocket Pan. Settings are per-workspace. The Settings Panel can be opened with the gear button in the toolbar.</p> <p></p> <p>Whenever a setting is changed, the buttons in the bottom life corner will change to <code>Cancel</code> and <code>Apply</code> respectively. Click the <code>Cancel</code> button to clear all changes, or the <code>Apply</code> button to save changes.</p> <p></p> <p>There are three sub-sections within the settings panel - <code>general</code>, <code>requests</code>, and <code>data</code>.</p>"},{"location":"documentation/panels/#general","title":"General","text":"<p>In the general settings menu, you can control the window zoom, the system theme (dark or light mode), and how you want variables to be displayed. The variable display setting is used for environment variables. The below example(s) show what it looks like for each setting:</p> <ul> <li>Key and Value</li> </ul> <p></p> <ul> <li>Value Only</li> </ul> <p></p>"},{"location":"documentation/panels/#requests","title":"Requests","text":"<p>The request settings menu has the options for the network call timeout duration, the maximum number of history records, and the script strategy order (this is the order in which scripts will execute).</p>"},{"location":"documentation/panels/#data","title":"Data","text":"<p>The data folder deals with saving, quitting to the workspace selection screen, and opening the data folder in your system's file explorer. You will rarely need to do this, but the <code>Open Data Folder</code> button will open the location of all of the data in Sprocket Pan in your system's file explorer.  </p>"},{"location":"documentation/panels/#environment","title":"Environment","text":"<p>The environment panel allows for editing of environments.</p> <p></p> <p>(1) The Title</p> <ul> <li>This text is editable. The title does not need to be unique, but it is reccomended to give it a unique and recognziable name.</li> </ul> <p>(2) Selected Checkmark Toggle</p> <ul> <li>Click this to toggle whether the environment is selected. Selecting an environment will also un-select all other environments since a maximum of one environment can be selected at any one time.</li> </ul> <p>(3) View/Edit toggle</p> <ul> <li>Toggle between view and edit mode. The default mode, edit mode, will function as normal. View mode switches the editor to read-only, and replaces all references to environment variables with their resolved value.</li> </ul> Edit ModeView Mode <p></p> <p></p> <p>(4) Clear Changes</p> <ul> <li>Clears all unsaved changes, reverting the editor to its untouched state.</li> </ul> <p>(5) Save Changes</p> <ul> <li>Saves all unsaved changes. Note that this will not save to disk, only memory. If you'd like to save to disk, the save button in the floating toolbar (top-left), is how to do it.</li> </ul> <p>(6) Copy to clipboard</p> <ul> <li>Copies the environment text to the clipboard.</li> </ul> <p>(7) Format</p> <ul> <li>Formats the text in the editor.</li> </ul> <p>(8) Environment Editor</p> <ul> <li>A monaco (vscode) JSON editor for the environment variables. Only supports string keys and string values.</li> </ul>"},{"location":"documentation/panels/#script","title":"Script","text":"<p>The script panel allows for the editing of standalone-scripts.</p> <p></p> <p>(1) The Title</p> <ul> <li>This text is editable. The title does not need to be unique, but it is reccomended to give it a unique and recognziable name.</li> </ul> <p>(2) Script-Callable Name</p> <ul> <li>The name that will be used when referencing this script in any script. This name must be unique, and be a valid variable name in Typescript.</li> </ul> <p>(3) Script Return Variable</p> <ul> <li>The name of the variable this script returns. This value can be blank. If it is not, then whenever this script is called, it will return the selected variable wrapped in a <code>Promise</code>.   </li> </ul> <p>(4) Run</p> <ul> <li>Runs the script as is, and outputs the script's return variable, if it exists.</li> </ul> <p>(5) Format</p> <ul> <li>Formats the text in the editor.</li> </ul> <p>(6) Copy to clipboard</p> <ul> <li>Copies the script text to the clipboard.</li> </ul> <p>(7) Script Editor</p> <ul> <li>A monaco (vscode) Typescript editor for the environment variables.</li> </ul> <p>(8) Return Variable Output</p> <ul> <li>Shows the script's return variable's value, if it exists, once a script has been run.</li> </ul>"},{"location":"documentation/panels/#service","title":"Service","text":"<p>The service panel allows for editing services.</p> <p></p> <p>(1) The Title</p> <ul> <li>This text is editable. The title does not need to be unique, but it is reccomended to give it a unique and recognziable name.</li> </ul> <p>(2) Description</p> <ul> <li>A description of the service. Be as verbose or succinct as you wish. Displays in markdown.</li> </ul> <p>(3) Information Table</p> <ul> <li>General information about the service. The baseurl will be prepended to all requests, and you can use environment variables.</li> </ul> <p>(4) Environments</p> <ul> <li>Services can have environments local to that service. Click the first circle button to select or deselect the environment. The next button will allow you to duplicate the local environment, and the third button is for deleting the local environment. The buttons/features are otherwise exactly the same as the Environment Panel</li> </ul> <p>(5) Pre- and Post-Request Scripts</p> <ul> <li>Scripts that will run before and after any request is run in the service.</li> </ul> <p>(6) Recent Requests</p> <ul> <li>A list of the most recent requests that were called, with the date they were last used and a link to open their Request Panel</li> </ul>"},{"location":"documentation/panels/#endpoint","title":"Endpoint","text":"<p>The endpoint panel allows for editing endpoints.</p> <p></p> <p>(1) The Title</p> <ul> <li>This text is editable. The title does not need to be unique, but it is reccomended to give it a unique and recognziable name.</li> </ul> <p>(2) Request Method</p> <ul> <li>The RESTful Request Method. Click the dropdown to select the method to send.</li> </ul> <p></p> <p>(3) Endpoint URL</p> <ul> <li>You can specify the additional url/uri string here. Each Endpoint corresponds to a unique URL of a service.</li> </ul> <p></p> <p>(4) Options Tabs</p> <ul> <li>The three tabs you can work in: Headers, Query Params, and Scripts</li> </ul> HeadersQuery ParamsScripts <p></p> <ul> <li>Headers to add to every request on this endpoint. This panel is exactly the same as the Environment</li> </ul> <p></p> <ul> <li>Query params to add to every request on this endpoint. Unlike other key-value-pair JSON editors, this editor can include arrays.</li> </ul> <p></p> <ul> <li>Similar to Services and Requests, you can have a script run before or after a request on this endpoint is sent.</li> </ul> <p>(5) Jump to Request</p> <ul> <li>Endpoints are a collection of requests. You cannot send a request from an Endpoint. If an Endpoint has a default Request, this button will open up that request.</li> </ul>"},{"location":"documentation/panels/#request","title":"Request","text":"<p>The request panel allows for editing and sending requests.</p> <p></p> <p>(1) The Title</p> <ul> <li>This text is editable. The title does not need to be unique, but it is reccomended to give it a unique and recognziable name.</li> </ul> <p>(2) Request Method [Read-Only]</p> <ul> <li>The RESTful request method used. You can't edit this in the request panel, you must go into the Endpoint to change this.</li> </ul> <p>(3) Full URL [Read-Only]</p> <ul> <li>Full URL that the request will call. You can't edit this in the request panel, you must go into the Endpoint to change this. However, you can add query parameters to this specific request, which will show up as part of the full URL.</li> </ul> <p>(4) Send Request</p> <ul> <li>Button to send the request.</li> </ul> <p>(5) Edit Endpoint</p> <ul> <li>This button will allow you to edit the Endpoint that this request is a part of.</li> </ul> <p>(6) Copy Request ID</p> <ul> <li>This button will add the unique identifier of this request to your clipboard. This functionality is only needed for advanced users who wish to programatically send a request.</li> </ul> <p>(7) Default Toggle</p> <ul> <li>Toggle this on or off to set/unset this request as the default for its endpoint.</li> </ul> <p>(8) Request Details Section</p> <ul> <li>Here you can edit different facets of the request.</li> </ul> BodyHeadersQuery ParamsScriptsEnvironment <p></p> <ul> <li>The request body. Sprocket Pan currently supports form data and raw data. The raw data can be Text, JSON, JavaScript, HTML, XML or Yaml. File sending is not currently supported but it is a top priority, so stay tuned.</li> </ul> <p></p> <ul> <li>The headers to send in the request. </li> </ul> <p></p> <ul> <li> <p>The query parameters to send in the request. You can include arrays in the JSON editor for query parameters.</p> </li> <li> <p>Any query params you add will show up in the full URL.</p> </li> </ul> <p></p> <ul> <li>Pre- and Post- Request scripts at the request level.</li> </ul> <p></p> <ul> <li>The environment variables for this request. Note that these values will override any service or global environment variables with the same name.</li> </ul>"},{"location":"documentation/panels/#9-response-details-section","title":"(9) Response Details Section","text":"<ul> <li>The response details section can be split into two groups, the history header, and the response details.</li> </ul>"},{"location":"documentation/panels/#history-header","title":"History Header","text":"<ul> <li>Past responses are saved, up to a maximum number configurable in the settings. The history header displays and controls the responses.</li> </ul> <p>(1) Response Timestamp</p> <ul> <li>The exact time the response was recieved.</li> </ul> <p>(2) Diff Viewer</p> <ul> <li>Opens the Diff Viewer. See Diff Viewer</li> </ul> <p>(3) History Navigation</p> <ul> <li>Controls to navigate between different items in the response history.</li> </ul> <p>(4) Delete History Item</p> <ul> <li>Button to delete the current history item.</li> </ul>"},{"location":"documentation/panels/#response-details","title":"Response Details","text":"BodyDetailsRequestEvent Log <ul> <li>The response body of the request, as well as the status code. This editor is read-only.</li> </ul> <ul> <li>Includes details about the response, including recieve and transit time, response code, and response headers.</li> </ul> <ul> <li>Includes details about the request sent for this specific response, including the request's method, url, headers, and body.</li> </ul> <ul> <li> <p>Shows the audit/event log for this response. Every time a script is called or a network request is sent, a log of that event will be added. If a script calls another script or sends another request, the logs for those actions will be indented such that they are a subset of that script. </p> </li> <li> <p>If a script or request is different from the current request selected, you can click the blue navigation button next to the name of the script or request to open its corresponding tab. </p> </li> </ul>"},{"location":"documentation/panels/#diff-viewer","title":"Diff Viewer","text":"<ul> <li>The Diff Viewer, or Diff Tool, allows you to see the exact differences between two specific responses.</li> </ul> <p>(1) Service Select Dropdown (Each Side)</p> <ul> <li>Here you can select the service of the responses that you are comparing for each side.</li> </ul> <p>(2) Endpoint Select Dropdown (Each Side)</p> <ul> <li>Here you can select the endpoint of the responses that you are comparing for each side.</li> </ul> <p>(3) Request Select Dropdown (Each Side)</p> <ul> <li>Here you can select the request of the responses that you are comparing for each side.</li> </ul> <p>(4) Response History Selection (Each Side)</p> <ul> <li>Here you can select the specific response item in the request's history for each side.</li> </ul> <p>(5) Response Differences</p> <ul> <li>Once a response item is selected for both sides, you will be able to view the differences between the responses - split into multiple tabs.</li> </ul> <p> Layout  Terminology</p>"},{"location":"documentation/terminology/","title":"Terminology","text":""},{"location":"documentation/terminology/#script","title":"Script","text":"<p>Scripts in Sprocket Pan are powerful tools that enable the user to perform some very advanced actions. One common workflow for engineers is to need to get an Auth token, if they do not already have one, before they send a given request. Another common workflow is to send a request to multiple services at once, and compare the results. Scripts enable that. Let's explore how they work.</p> <p>Firstly, all scripts are in Typescript, but the types are only there to help you, and if you are only familiar with Javascript, you will not need to learn anything new in order to write scripts. Most JS language features are available, and there is also an additional variable that you can reference to perform actions specific to Sprocket Pan - the <code>sprocketPan</code> variable (aliased to <code>sp</code>).</p> <p></p> <p>Let's run through the different fields:</p>"},{"location":"documentation/terminology/#fields","title":"Fields","text":""},{"location":"documentation/terminology/#activerequest","title":"activeRequest","text":"<ul> <li>(could be null) The active request that the script is being run on, if it exists. If you run a standalone script manually, this will be null.</li> </ul>"},{"location":"documentation/terminology/#data","title":"data","text":"<ul> <li>A read-only copy of the entire application data. Not sure why you'd need it, but it is there if you want it.</li> </ul>"},{"location":"documentation/terminology/#getenvironment","title":"getEnvironment","text":"<ul> <li>A function with no arguments that returns all of the environment variables (key/value map) as an object.</li> </ul>"},{"location":"documentation/terminology/#response","title":"response","text":"<ul> <li>(could be null) The latest response on the activeRequest, if it exists.</li> </ul>"},{"location":"documentation/terminology/#sendrequest","title":"sendRequest","text":"<ul> <li>Allows you to send another Sprocket Pan request programatically. Takes one argument, which is the request ID.</li> </ul>"},{"location":"documentation/terminology/#setenvironmentvariable","title":"setEnvironmentVariable","text":"<ul> <li> <p>Takes in 2-3 arguments</p> <ul> <li> <p>Key: string - the key in the environment to set</p> </li> <li> <p>Value: string - the value to set</p> </li> <li> <p>(Optional) Level: 'request' | 'service' | 'global' - which environment to set the key/value in. Defaults to the request level unless the request is null, then will always set the globally selected environment.</p> </li> </ul> </li> </ul>"},{"location":"documentation/terminology/#setheader","title":"setHeader","text":"<ul> <li>Takes in a key and a value (strings), and saves the new header at the request level.</li> </ul>"},{"location":"documentation/terminology/#setqueryparam","title":"setQueryParam","text":"<ul> <li>Takes in a key and a value, and adds the given value the array of values for the key, of it exists, or creates a new key/value pair if not. (Query Params can have multiple values for a given key)</li> </ul>"},{"location":"documentation/terminology/#setqueryparams","title":"setQueryParams","text":"<ul> <li>Takes in a key (string) and a value (array of strings), and overrides the query param at a given key to be the list of values passed in.</li> </ul>"},{"location":"documentation/terminology/#all-scripts","title":"All Scripts","text":"<ul> <li> <p>Any and all globally-defined / standalone scripts will also be available as a field in the <code>sprocketPan</code> variable, referrable by their Script-Callable Name. In the screenshot above, you can see we have two scripts defined with the names <code>Runnable_Script_Copy_</code> and <code>runnableScript</code> respectively.</p> </li> <li> <p>The return type of standalone scripts will always be the type of whatever the Script Return Variable is, wrapped in a promise. It is recommended that you <code>await</code> a script whenever you call it, as it may or may not be asynchronous.</p> </li> </ul>"},{"location":"documentation/terminology/#service","title":"Service","text":"<p>A service is a series of endpoints that all share a root URL. An example of this may be the <code>https://swapi.dev/api/</code> service - all calls to the service fall under the same URL. In practice, you may use scripts or environments to modify this URL based on your needs, but all endpoints within a service should share a root.</p>"},{"location":"documentation/terminology/#environment","title":"Environment","text":"<p>An environment is a group of key-value pairs that defines custom values for the given situation. The most common use of environments is for seperating information between production and development APIs, which are otherwise the same service. You could have the environment define a different URL for the production and development environment, and then you could just switch between which environment is selected in order to call the same service in either production or development. Environments can also be used to persist data you may need to use later.</p>"},{"location":"documentation/terminology/#endpoint","title":"Endpoint","text":"<p>An endpoint is a specific url within an environment, that has a specific request method attached to it. An example of this may be the <code>GET https://swapi.dev/api/people/{personId}</code> endpoint. Environments always exist within the context of a service.</p>"},{"location":"documentation/terminology/#request","title":"Request","text":"<p>A request is the payload that will be sent via an endpoint. You may have any number of requests per endpoint, as it is a common workflow for engineers to test different payloads (be it request body, headers, query params, etc) to the same endpoint.</p>"},{"location":"documentation/terminology/#history","title":"History","text":"<p>The response history for requests is stored in the request and can be viewed and compared with other requests.</p> <p> Panels  Contributing</p>"},{"location":"getting-started/download/","title":"Download Sprocket Pan Here","text":""},{"location":"getting-started/download/#current-version-v100","title":"Current Version - v1.0.0","text":"WindowsLinuxMac <ul> <li>.msi installer</li> <li>.exe installer</li> </ul> <ul> <li>AppImage<ul> <li>Compatible with all versions of Linux</li> </ul> </li> <li>.deb<ul> <li>Debian-based distros only (Debian, Mint, Ubuntu, etc)</li> </ul> </li> </ul> <ul> <li>DiskImage</li> <li>gzip'd .App</li> </ul>"},{"location":"getting-started/download/#other-versions","title":"Other Versions","text":"<p>All versions of Sprocket Pan can be found in the Github Repo's Releases</p> <p> Home  Layout</p>"},{"location":"getting-started/layout/","title":"Layout of Sprocket Pan","text":""},{"location":"getting-started/layout/#workspace-selection-screen","title":"Workspace Selection Screen","text":"<p>Sprocket Pan is organized at the top level by workspaces. Each workspace should be fully seperate from other workspaces since workspaces are unable to cross-reference each other's data or requests. There is no limit to how much you can put inside a single workspace, and workspaces exist as an organizational tool in order to allow totally seperate things to be distinct and easy to seperately access.</p> <p>In the workspace selection screen, you can click the giant blue and white plus button to create a new workspace.</p> <p></p> <p>You can then fill out the creation modal and hit create. Once you do, a new workspace will be created.</p> <p>You can open a workspace by clicking on the <code>Open</code> button.</p>"},{"location":"getting-started/layout/#sprocket-pan-workspace-screen","title":"Sprocket Pan Workspace Screen","text":""},{"location":"getting-started/layout/#toolbar","title":"Toolbar","text":"<p>The toolbar is a floating set of actions that the user can take to interact with Sprocket Pan. Like all other buttons in SP, highlighting over any of the toolbar actions will show a tooltip description.</p>"},{"location":"getting-started/layout/#import-from-file","title":"Import From File","text":"<p>The first button in the top row of buttons, <code>Import from File</code> opens up a file selection dialog. SP currently supports openAPI/swagger docs versions <code>2</code>, <code>3</code> and <code>3.1</code>. You can click on any openAPI <code>JSON</code> or <code>yaml</code> file to load the document into SP.</p>"},{"location":"getting-started/layout/#create-new","title":"Create New","text":"<p>The second button in the top row, <code>Create New</code>, will allow you to make any of the root file system items, either a new Service, Environment, or Script.</p>"},{"location":"getting-started/layout/#save","title":"Save","text":"<p>Remember to save often! This button will save all of your changes to the filesystem. An auto-save feature is in the works.</p>"},{"location":"getting-started/layout/#settings","title":"Settings","text":"<p>This button opens the settings menu.</p>"},{"location":"getting-started/layout/#tab-navigation","title":"Tab Navigation","text":"<p>When you click through different tabs, the history/order of the tabs you selected is preserved. This way, you can quickly naviate to a previously selected tab (and then go 'forward' again to the tab you just left) with these buttons.</p>"},{"location":"getting-started/layout/#search","title":"Search","text":"<p>As the file system grows, finding exactly what you want through a visual search can get cumbersone. The search bar will search through everything in the file system to help you find exactly what you need.</p>"},{"location":"getting-started/layout/#file-system","title":"File System","text":"<p>The file system contains everything saved to Sprocket Pan - Environments, Scripts, Services, Endpoints, and Requests.</p> <p>The file system is split into three section - Environments, Scripts, and Services. Within services are endpoints, which themselves contain requests. Clicking on any item in the file system will open up the corresponding tab.</p>"},{"location":"getting-started/layout/#tabs","title":"Tabs","text":"<p>Tabs are the displayed data and options when an item in the file system is selected. Clicking on the tab at the top will open up the information about that tab, as well as scroll to the corresponding file system entry. Similarly, clicking on an item in the file system will scroll to the tab at the top, if it is already opened.</p> <p> Download  View the docs</p>"}]}