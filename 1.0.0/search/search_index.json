{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sprocket Pan","text":"<p>A tool for sending HTTP(S) requests over the internet - essentialy a UI on top of curl plus some quality-of-life features. Similar to Postman and Insomnia.</p>"},{"location":"#inspiration","title":"Inspiration","text":"<p>Postman has been the go-to tool for developers to test their RESTful (and other types of) APIs for the good part of the last decade. However, recent changes to Postman have made it such that you need to create an account to gain full functionality of the tool, and Postman actually deleted the user data of everyone who didn't migrate. Insomnia, which bills itself as a FOSS alternative, also recently pushed an update mirroring Postman's changes.</p> <p>The enshittifaction of the internet has to stop. Greed drives everyday descision-making, and public tools have been constantly limit-tested against the willingness of end-users to put up with each additional pay-wall or data-wall. Sprocket Pan was just built for me, in order to have a tool that I know is free, secure, cloudless, and rich in features. However, in the spirit of open source, and in honor of all of the incredible free tools that I use every day, I wanted to make Sprocket Pan available for everyone. We will never charge money for anything, we will never collect or harvest any data (and/or train your data on an AI), and Sprocket Pan will always be FOSS.</p> <p> Get started!</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#authors","title":"Authors","text":""},{"location":"about/#itai-fish","title":"Itai Fish","text":""},{"location":"about/#katelynn-pullen","title":"KateLynn Pullen","text":""},{"location":"about/#tech-stack","title":"Tech Stack","text":""},{"location":"about/#sprocket-pan","title":"Sprocket Pan","text":"<p>Application Framework: Tauri, Rust</p> <p>Frontend: Typescript, Vite, React, Redux</p> <p>CI/CD: Github Actions</p> <p></p>"},{"location":"about/#sprocket-docs","title":"Sprocket Docs","text":"<p>Docs Page: mkdocs, mkdocs-material, python</p> <p>CI/CD: Github Actions</p> <p>Hosting: Github Pages</p> <p></p>"},{"location":"about/#why-sprocket-pan","title":"Why \"Sprocket Pan\"?","text":"<p>When Insomnia announced their user account requirements, many people at the company I worked at were panicked, searching for a good alternative to Insomnia. A group of engineers decided to get together to build the tool themself, as they could then integrate with company-specific features while having something reliable and useful. They pitched the name \"Rocket Man\" a play on the original Postman that they would be emulating. When discussing the application framework to use, I suggested Tauri, a multi-platform framework built in rust, with blazing fast built speeds, tiny memory and storage footprints, and an active development community behind it. Others at the company fought back against Tauri, fearing that the Rust language would be too hard for developers to work in. Given that an absolutely miniscule amount of Sprocket Pan is actually Rust, their fears were unfounded for multiple reasons, but it was enough for them to work on Rocket Man in Electron. I decided to build my own application, with blackjack and hookers Rust and Typescript. I named it Sprocket Pan, a spoof on the already-a-spoof-of-something-else Rocket Man.</p>"},{"location":"contributing/","title":"Contributing to Sprocket Pan","text":""},{"location":"contributing/#running-locally","title":"Running Locally","text":""},{"location":"contributing/#recommended-ide-setup","title":"Recommended IDE Setup","text":"<ul> <li>VS Code + Tauri + rust-analyzer</li> </ul>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<p>https://tauri.app/v1/guides/getting-started/prerequisites/</p>"},{"location":"contributing/#how-to-run","title":"How to run","text":"<ol> <li><code>yarn</code></li> <li><code>yarn run start</code></li> </ol>"},{"location":"documentation/panels/","title":"Panels","text":""},{"location":"documentation/panels/#settings","title":"Settings","text":"<p>The Settings Panel allows the user to change different settings within Sprocket Pan. Settings are per-workspace. The Settings Panel can be opened with the gear button in the toolbar.</p> <p></p> <p>Whenever a setting is changed, the buttons in the bottom life corner will change to <code>Cancel</code> and <code>Apply</code> respectively. Click the <code>Cancel</code> button to clear all changes, or the <code>Apply</code> button to save changes.</p> <p></p> <p>There are three sub-sections within the settings panel - <code>general</code>, <code>requests</code>, and <code>data</code>.</p>"},{"location":"documentation/panels/#general","title":"General","text":"<p>In the general settings menu, you can control the window zoom, the system theme (dark or light mode), and how you want variables to be displayed. The variable display setting is used for environment variables. The below example(s) show what it looks like for each setting:</p> <ul> <li>Key and Value</li> </ul> <p></p> <ul> <li>Value Only</li> </ul> <p></p>"},{"location":"documentation/panels/#requests","title":"Requests","text":"<p>The request settings menu has the options for the network call timeout duration, the maximum number of history records, and the script strategy order. For the network call timeout duration</p>"},{"location":"documentation/panels/#data","title":"Data","text":"<p>The data folder deals with saving, quitting to the workspace selection screen, and opening the data folder in your system's file explorer. You will rarely need to do this, but the <code>Open Data Folder</code> button will open the location of all of the data in Sprocket Pan in your system's file explorer.  </p>"},{"location":"documentation/panels/#environment","title":"Environment","text":"<p>The environment panel allows for editing of environments.</p> <p></p> <p>(1) The Title</p> <ul> <li>This text is editable. The title does not need to be unique, but it is reccomended to give it a unique and recognziable name.</li> </ul> <p>(2) Selected Checkmark Toggle</p> <ul> <li>Click this to toggle whether the environment is selected. Selecting an environment will also un-select all other environments since a maximum of one environment can be selected at any one time.</li> </ul> <p>(3) View/Edit toggle</p> <ul> <li>Toggle between view and edit mode. The default mode, edit mode, will function as normal. View mode switches the editor to read-only, and replaces all references to environment variables with their resolved value.</li> </ul> Edit ModeView Mode <p></p> <p></p> <p>(4) Clear Changes</p> <ul> <li>Clears all unsaved changes, reverting the editor to its untouched state.</li> </ul> <p>(5) Save Changes</p> <ul> <li>Saves all unsaved changes. Note that this will not save to disk, only memory. If you'd like to save to disk, the save button in the floating toolbar (top-left), is how to do it.</li> </ul> <p>(6) Copy to clipboard</p> <ul> <li>Copies the environment text to the clipboard.</li> </ul> <p>(7) Format</p> <ul> <li>Formats the text in the editor.</li> </ul> <p>(8) Environment Editor</p> <ul> <li>A monaco (vscode) JSON editor for the environment variables. Only supports string keys and string values.</li> </ul>"},{"location":"documentation/panels/#script","title":"Script","text":"<p>The script panel allows for the editing of standalone-scripts.</p> <p></p> <p>(1) The Title</p> <ul> <li>This text is editable. The title does not need to be unique, but it is reccomended to give it a unique and recognziable name.</li> </ul> <p>(2) Script-Callable Name</p> <ul> <li>The name that will be used when referencing this script in any script. This name must be unique, and be a valid variable name in Typescript.</li> </ul> <p>(3) Script Return Variable</p> <ul> <li>The name of the variable this script returns. This value can be blank. If it is not, then whenever this script is called, it will return the selected variable wrapped in a <code>Promise</code>.   </li> </ul> <p>(4) Run</p> <ul> <li>Runs the script as is, and outputs the script's return variable, if it exists.</li> </ul> <p>(5) Format</p> <ul> <li>Formats the text in the editor.</li> </ul> <p>(6) Copy to clipboard</p> <ul> <li>Copies the script text to the clipboard.</li> </ul> <p>(7) Script Editor</p> <ul> <li>A monaco (vscode) Typescript editor for the environment variables.</li> </ul> <p>(8) Return Variable Output</p> <ul> <li>Shows the script's return variable's value, if it exists, once a script has been run.</li> </ul>"},{"location":"documentation/terminology/","title":"Terminology","text":""},{"location":"documentation/terminology/#panel","title":"Panel","text":""},{"location":"documentation/terminology/#file-system","title":"File System","text":""},{"location":"documentation/terminology/#script","title":"Script","text":""},{"location":"documentation/terminology/#service","title":"Service","text":""},{"location":"documentation/terminology/#environment","title":"Environment","text":""},{"location":"documentation/terminology/#endpoint","title":"Endpoint","text":""},{"location":"documentation/terminology/#request","title":"Request","text":""},{"location":"documentation/terminology/#history","title":"History","text":""},{"location":"getting-started/download/","title":"Download Sprocket Pan Here","text":""},{"location":"getting-started/download/#current-version-v100","title":"Current Version - v1.0.0","text":"WindowsLinuxMac <ul> <li>.msi installer</li> <li>.exe installer</li> </ul> <ul> <li>AppImage<ul> <li>Compatible with all versions of Linux</li> </ul> </li> <li>.deb<ul> <li>Debian-based distros only (Debian, Mint, Ubuntu, etc)</li> </ul> </li> </ul> <ul> <li>DiskImage</li> <li>gzip'd .App</li> </ul>"},{"location":"getting-started/download/#other-versions","title":"Other Versions","text":"<p>All versions of Sprocket Pan can be found in the Github Repo's Releases</p> <p> Home  Layout</p>"},{"location":"getting-started/layout/","title":"Layout of Sprocket Pan","text":""},{"location":"getting-started/layout/#workspace-selection-screen","title":"Workspace Selection Screen","text":"<p>Sprocket Pan is organized at the top level by workspaces. Each workspace should be fully seperate from other workspaces since workspaces are unable to cross-reference each other's data or requests. There is no limit to how much you can put inside a single workspace, and workspaces exist as an organizational tool in order to allow totally seperate things to be distinct and easy to seperately access.</p> <p>In the workspace selection screen, you can click the giant blue and white plus button to create a new workspace.</p> <p></p> <p>You can then fill out the creation modal and hit create. Once you do, a new workspace will be created.  </p> <p>You can open a workspace by clicking on the <code>Open</code> button.</p>"},{"location":"getting-started/layout/#sprocket-pan-workspace-screen","title":"Sprocket Pan Workspace Screen","text":""},{"location":"getting-started/layout/#toolbar","title":"Toolbar","text":"<p>The toolbar is a floating set of actions that the user can take to interact with Sprocket Pan. Like all other buttons in SP, highlighting over any of the toolbar actions will show a tooltip description.</p>"},{"location":"getting-started/layout/#import-from-file","title":"Import From File","text":"<p>The first button in the top row of buttons, <code>Import from File</code> opens up a file selection dialog. SP currently supports openAPI/swagger docs versions <code>2</code>, <code>3</code> and <code>3.1</code>. You can click on any openAPI <code>JSON</code> or <code>yaml</code> file to load the document into SP.</p>"},{"location":"getting-started/layout/#create-new","title":"Create New","text":"<p>The second button in the top row, <code>Create New</code>, will allow you to make any of the root file system items, either a new Service, Environment, or Script.</p>"},{"location":"getting-started/layout/#save","title":"Save","text":"<p>Remember to save often! This button will save all of your changes to the filesystem. An auto-save feature is in the works.</p>"},{"location":"getting-started/layout/#settings","title":"Settings","text":"<p>This button opens the settings menu.</p>"},{"location":"getting-started/layout/#tab-navigation","title":"Tab Navigation","text":"<p>When you click through different tabs, the history/order of the tabs you selected is preserved. This way, you can quickly naviate to a previously selected tab (and then go 'forward' again to the tab you just left) with these buttons.</p>"},{"location":"getting-started/layout/#search","title":"Search","text":"<p>As the file system grows, finding exactly what you want through a visual search can get cumbersone. The search bar will search through everything in the file system to help you find exactly what you need.</p>"},{"location":"getting-started/layout/#file-system","title":"File System","text":"<p>The file system contains everything saved to Sprocket Pan - Environments, Scripts, Services, Endpoints, and Requests.</p> <p>The file system is split into three section - Environments, Scripts, and Services. Within services are endpoints, which themselves contain requests. Clicking on any item in the file system will open up the corresponding tab.</p>"},{"location":"getting-started/layout/#tabs","title":"Tabs","text":"<p>Tabs are the displayed data and options when an item in the file system is selected. Clicking on the tab at the top will open up the information about that tab, as well as scroll to the corresponding file system entry. Similarly, clicking on an item in the file system will scroll to the tab at the top, if it is already opened.</p> <p> Download  View the docs</p>"}]}