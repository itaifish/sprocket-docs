{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sprocket Pan","text":"<p>A tool for sending HTTP(S) requests over the internet - essentialy a UI on top of curl plus some quality-of-life features. Similar to Postman and Insomnia.</p>"},{"location":"#inspiration","title":"Inspiration","text":"<p>Postman has been the go-to tool for developers to test their RESTful (and other types of) APIs for the good part of the last decade. However, recent changes to Postman have made it such that you need to create an account to gain full functionality of the tool, and Postman actually deleted the user data of everyone who didn't migrate. Insomnia, which bills itself as a FOSS alternative, also recently pushed an update mirroring Postman's changes.</p> <p>The enshittifaction of the internet has to stop. Greed drives everyday descision-making, and public tools have been constantly limit-tested against the willingness of end-users to put up with each additional pay-wall or data-wall. Sprocket Pan was just built for me, in order to have a tool that I know is free, secure, cloudless, and rich in features. However, in the spirit of open source, and in honor of all of the incredible free tools that I use every day, I wanted to make Sprocket Pan available for everyone. We will never charge money for anything, we will never collect or harvest any data (and/or train your data on an AI), and Sprocket Pan will always be FOSS.</p>"},{"location":"#why-sprocket-pan","title":"Why \"Sprocket Pan\"?","text":"<p>When Insomnia announced their user account requirements, many people at the company I worked at were panicked, searching for a good alternative to Insomnia. A group of engineers decided to get together to build the tool themself, as they could then integrate with company-specific features while having something reliable and useful. They pitched the name \"Rocket Man\" a play on the original Postman that they would be emulating. When discussing the application framework to use, I suggested Tauri, a multi-platform framework built in rust, with blazing fast built speeds, tiny memory and storage footprints, and an active development community behind it. Others at the company fought back against Tauri, fearing that the Rust language would be too hard for developers to work in. Given that an absolutely miniscule amount of Sprocket Pan is actually Rust, their fears were unfounded for multiple reasons, but it was enough for them to work on Rocket Man in Electron. I decided to build my own application, with blackjack and hookers Rust and Typescript. I named it Sprocket Pan, a spoof on the already-a-spoof-of-something-else Rocket Man.</p>"},{"location":"contributing/","title":"Contributing to Sprocket Pan","text":""},{"location":"contributing/#running-locally","title":"Running Locally","text":""},{"location":"contributing/#recommended-ide-setup","title":"Recommended IDE Setup","text":"<ul> <li>VS Code + Tauri + rust-analyzer</li> </ul>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<p>https://tauri.app/v1/guides/getting-started/prerequisites/</p>"},{"location":"contributing/#how-to-run","title":"How to run","text":"<ol> <li><code>yarn</code></li> <li><code>yarn run start</code></li> </ol>"},{"location":"getting-started/download/","title":"Download Sprocket Pan Here","text":""},{"location":"getting-started/download/#current-version-v100","title":"Current Version - v1.0.0","text":"WindowsLinuxMac <ul> <li>.msi installer</li> <li>.exe installer</li> </ul> <ul> <li>AppImage<ul> <li>Compatible with all versions of Linux</li> </ul> </li> <li>.deb<ul> <li>Debian-based distros only (Debian, Mint, Ubuntu, etc)</li> </ul> </li> </ul> <ul> <li>DiskImage</li> <li>gzip'd .App</li> </ul>"},{"location":"getting-started/download/#other-versions","title":"Other Versions","text":"<p>All versions of Sprocket Pan can be found in the Github Repo's Releases</p>"},{"location":"getting-started/layout/","title":"Layout of Sprocket Pan","text":""},{"location":"getting-started/layout/#workspace-selection-screen","title":"Workspace Selection Screen","text":"<p>Sprocket Pan is organized at the top level by workspaces. Each workspace should be fully seperate from other workspaces since workspaces are unable to cross-reference each other's data or requests. There is no limit to how much you can put inside a single workspace, and workspaces exist as an organizational tool in order to allow totally seperate things to be distinct and easy to seperately access.</p> <p>In the workspace selection screen, you can click the giant blue and white plus button to create a new workspace.</p> <p></p> <p>You can then fill out the creation modal and hit create. Once you do, a new workspace will be created.  </p> <p>You can open a workspace by clicking on the <code>Open</code> button.</p>"},{"location":"getting-started/layout/#sprocket-pan-workspace-screen","title":"Sprocket Pan Workspace Screen","text":""},{"location":"getting-started/layout/#toolbar","title":"Toolbar","text":"<p>The toolbar is a floating set of actions that the user can take to interact with Sprocket Pan. Like all other buttons in SP, highlighting over any of the toolbar actions will show a tooltip description.</p>"},{"location":"getting-started/layout/#import-from-file","title":"Import From File","text":"<p>The first button in the top row of buttons, <code>Import from File</code> opens up a file selection dialog. SP currently supports openAPI/swagger docs versions <code>2</code>, <code>3</code> and <code>3.1</code>. You can click on any openAPI <code>JSON</code> or <code>yaml</code> file to load the document into SP.</p>"},{"location":"getting-started/layout/#create-new","title":"Create New","text":"<p>The second button in the top row, <code>Create New</code>, will allow you to make any of the root file system items, either a new Service, Environment, or Script.</p>"},{"location":"getting-started/layout/#save","title":"Save","text":"<p>Remember to save often! This button will save all of your changes to the filesystem. An auto-save feature is in the works.</p>"},{"location":"getting-started/layout/#settings","title":"Settings","text":"<p>This button opens the settings menu.</p>"},{"location":"getting-started/layout/#tab-navigation","title":"Tab Navigation","text":""},{"location":"getting-started/layout/#search","title":"Search","text":""},{"location":"getting-started/layout/#file-system","title":"File System","text":""},{"location":"getting-started/layout/#environments","title":"Environments","text":""},{"location":"getting-started/layout/#scripts","title":"Scripts","text":""},{"location":"getting-started/layout/#services","title":"Services","text":""},{"location":"getting-started/layout/#service-endpoints","title":"Service Endpoints","text":""},{"location":"getting-started/layout/#endpoint-requests","title":"Endpoint Requests","text":""},{"location":"getting-started/panels/","title":"Panels","text":""},{"location":"getting-started/panels/#settings","title":"Settings","text":"<p>The Settings Panel allows the user to change different settings within Sprocket Pan. Settings are per-workspace. The Settings Panel can be opened with the gear button in the toolbar.</p> <p> </p> <p>Whenever a setting is changed, the buttons in the bottom life corner will change to <code>Cancel</code> and <code>Apply</code> respectively. Click the <code>Cancel</code> button to clear all changes, or the <code>Apply</code> button to save changes. </p> <p></p> <p>There are three sub-sections within the settings panel - <code>general</code>, <code>requests</code>, and <code>data</code>.</p>"},{"location":"getting-started/panels/#general","title":"General","text":"<p>In the general settings menu, you can control the window zoom, the system theme (dark or light mode), and how you want variables to be displayed. The variable display setting is used for environment variables. The below example(s) show what it looks like for each setting:</p> <ul> <li>Key and Value</li> </ul> <p></p> <ul> <li>Value Only</li> </ul> <p></p>"},{"location":"getting-started/panels/#requests","title":"Requests","text":"<p>The request settings manu has the options for the network call timeout duration, the maximum number of history records, and the script strategy order. For the network call timeout duration</p>"},{"location":"getting-started/terminology/","title":"Terminology","text":""},{"location":"getting-started/terminology/#file-system","title":"File System","text":""},{"location":"getting-started/terminology/#script","title":"Script","text":""},{"location":"getting-started/terminology/#service","title":"Service","text":""},{"location":"getting-started/terminology/#environment","title":"Environment","text":""},{"location":"getting-started/terminology/#endpoint","title":"Endpoint","text":""},{"location":"getting-started/terminology/#request","title":"Request","text":""},{"location":"getting-started/terminology/#history","title":"History","text":""}]}